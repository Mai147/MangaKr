import Head from "next/head";
import { Inter } from "@next/font/google";
import useAuth from "@/hooks/useAuth";
import { useEffect } from "react";
import Home from "@/components/Home";
import { HomeProvider } from "@/context/HomeContext";

const inter = Inter({ subsets: ["latin"] });

type HomePageProps = {};

const HomePage: React.FC<HomePageProps> = () => {
    const { setNeedAuth } = useAuth();
    useEffect(() => {
        setNeedAuth(false);
    }, []);

    // const testFunction = async () => {
    //     try {
    //         const batch = writeBatch(fireStore);
    //         const res = collectionGroup(fireStore, "genreSnippets");
    //         const res2 = query(res, where("name", "==", "Genre 1"));
    //         const docs = await getDocs(res2);
    //         docs.docs.forEach((doc) => {
    //             if (doc.exists()) {
    //                 batch.update(doc.ref, {
    //                     name: "New name",
    //                     description: "New description",
    //                 });
    //             }
    //         });
    //         await batch.commit();
    //         console.log(1);
    //     } catch (error) {
    //         console.log(error);
    //     }
    // };

    // const testFunction = async () => {
    //     try {
    //         const batch = writeBatch(fireStore);
    //         const res = collectionGroup(fireStore, "reviews");
    //         const res2 = query(
    //             res,
    //             where("creatorId", "==", "Gw6Fcbm7yWV5zcr5ORlJlwP1lQw1")
    //         );
    //         const docs = await getDocs(res2);
    //         docs.docs.forEach((doc) => {
    //             if (doc.exists()) {
    //                 batch.update(doc.ref, {
    //                     creatorDisplayName: "KKKKKKK",
    //                 });
    //             }
    //         });
    //         await batch.commit();
    //         console.log(1);
    //     } catch (error) {
    //         console.log(error);
    //     }
    // };

    // const testFunction = async () => {
    //     try {
    //         const batch = writeBatch(fireStore);
    //         const bookDocsRef = collection(
    //             fireStore,
    //             firebaseRoute.getAllAuthorRoute()
    //         );
    //         const bookDocs = await getDocs(bookDocsRef);
    //         bookDocs.docs.forEach((doc) => {
    //             const name = doc.data().name as string;
    //             batch.update(doc.ref, {
    //                 nameLowerCase: name.toLowerCase(),
    //             });
    //         });
    //         await batch.commit();
    //         console.log(1);
    //     } catch (error) {
    //         console.log(error);
    //     }
    // };

    // const testFunction = async () => {
    //     try {
    //         const batch = writeBatch(fireStore);
    //         const commentDocsRef = collectionGroup(fireStore, "comments");
    //         const commentDocs = await getDocs(commentDocsRef);
    //         commentDocs.docs.forEach((doc) => {
    //             if (doc.exists()) {
    //                 batch.update(doc.ref, {
    //                     numberOfReplies: 0,
    //                 });
    //             }
    //         });
    //         await batch.commit();
    //         console.log(1);
    //     } catch (error) {
    //         console.log(error);
    //     }
    // };

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                {/* <Button onClick={testFunction}>Test</Button> */}
                <HomeProvider>
                    <Home />
                </HomeProvider>
            </main>
        </>
    );
};

export default HomePage;
